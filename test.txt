# Base filename pattern
$baseFileName = "service-log"
$extension = ".txt"
$counter = 1

# Loop to find next available log file name
do {
    $logFile = Join-Path $logFolder ("{0}_{1}{2}" -f $baseFileName, $counter, $extension)
    $counter++
} while (Test-Path $logFile)



function Start-ServiceWithRetry {
    param (
        [string]$ServiceName,
        [int]$MaxAttempts = 3,
        [int]$RetryDelaySeconds = 3
    )

    $attempt = 1
    $success = $false

    while ($attempt -le $MaxAttempts -and -not $success) {
        try {
            $svc = Get-Service -Name $ServiceName -ErrorAction Stop

            if ($svc.Status -eq 'Running') {
                Write-Host "[INFO] '$ServiceName' is already running." -ForegroundColor Green
                return $true
            }

            Write-Host "[INFO] Attempt #$attempt to start '$ServiceName'" -ForegroundColor Cyan
            Start-Service -Name $ServiceName -ErrorAction Stop
            Start-Sleep -Seconds 2

            $svc.Refresh()
            if ($svc.Status -eq 'Running') {
                Write-Host "[SUCCESS] '$ServiceName' started successfully." -ForegroundColor Green
                $success = $true
                return $true
            } else {
                throw "Still not running (Status: $($svc.Status))"
            }
        }
        catch {
            Write-Host "[ERROR] Attempt #$attempt failed: $($_.Exception.Message)" -ForegroundColor Red
            $attempt++
            Start-Sleep -Seconds $RetryDelaySeconds
        }
    }

    Write-Host "[FAIL] '$ServiceName' failed to start after $MaxAttempts attempts." -ForegroundColor Red
    return $false
}

$servicesToStart = @('CBFTService1', 'FTUService2', 'FTUService3')

foreach ($svcName in $servicesToStart) {
    $result = Start-ServiceWithRetry -ServiceName $svcName

    if (-not $result) {
        # Optionally log to file here
        Write-Host "[WARN] Skipping '$svcName' after failures." -ForegroundColor Yellow
        continue
    }

    # Further actions if needed...
}


# Print and log minimal info (Name + State)
    $filtered | ForEach-Object {
        $line = "[$($_.Name)] - $($_.State)"
        Write-Host $line
        Add-Content -Path $summaryFile -Value $line
    }
