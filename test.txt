# Base filename pattern
$baseFileName = "service-log"
$extension = ".txt"
$counter = 1

# Loop to find next available log file name
do {
    $logFile = Join-Path $logFolder ("{0}_{1}{2}" -f $baseFileName, $counter, $extension)
    $counter++
} while (Test-Path $logFile)



function Start-ServiceWithRetry {
    param (
        [string]$ServiceName,
        [int]$MaxAttempts = 3,
        [int]$RetryDelaySeconds = 3
    )

    $attempt = 1
    $success = $false

    while ($attempt -le $MaxAttempts -and -not $success) {
        try {
            $svc = Get-Service -Name $ServiceName -ErrorAction Stop

            if ($svc.Status -eq 'Running') {
                Write-Host "[INFO] '$ServiceName' is already running." -ForegroundColor Green
                return $true
            }

            Write-Host "[INFO] Attempt #$attempt to start '$ServiceName'" -ForegroundColor Cyan
            Start-Service -Name $ServiceName -ErrorAction Stop
            Start-Sleep -Seconds 2

            $svc.Refresh()
            if ($svc.Status -eq 'Running') {
                Write-Host "[SUCCESS] '$ServiceName' started successfully." -ForegroundColor Green
                $success = $true
                return $true
            } else {
                throw "Still not running (Status: $($svc.Status))"
            }
        }
        catch {
            Write-Host "[ERROR] Attempt #$attempt failed: $($_.Exception.Message)" -ForegroundColor Red
            $attempt++
            Start-Sleep -Seconds $RetryDelaySeconds
        }
    }

    Write-Host "[FAIL] '$ServiceName' failed to start after $MaxAttempts attempts." -ForegroundColor Red
    return $false
}

$servicesToStart = @('CBFTService1', 'FTUService2', 'FTUService3')

foreach ($svcName in $servicesToStart) {
    $result = Start-ServiceWithRetry -ServiceName $svcName

    if (-not $result) {
        # Optionally log to file here
        Write-Host "[WARN] Skipping '$svcName' after failures." -ForegroundColor Yellow
        continue
    }

    # Further actions if needed...
}


function Start-ServiceWithRetryAndTimeout {
    param (
        [string]$ServiceName,
        [int]$TimeoutSeconds = 30,
        [int]$MaxAttempts = 3,
        [int]$SleepBetweenRetries = 5,
        [int]$NoProgressSeconds = 10  # Optional early timeout if stuck
    )

    $attempt = 1
    while ($attempt -le $MaxAttempts) {
        Write-Host "`n--- Attempt $attempt to start service '$ServiceName' ---"

        $service = Get-Service -Name $ServiceName -ErrorAction SilentlyContinue
        if (-not $service) {
            Write-Warning "Service '$ServiceName' not found."
            return
        }

        if ($service.Status -eq 'Running') {
            Write-Host "‚úÖ Service is already running."
            return
        }

        try {
            Write-Host "Starting service..."
            Start-Service -Name $ServiceName -ErrorAction Stop
        } catch {
            Write-Warning "Start attempt failed: $_"
        }

        # Wait loop
        $elapsed = 0
        $stuckElapsed = 0
        $lastStatus = $service.Status
        while ($elapsed -lt $TimeoutSeconds) {
            Start-Sleep -Seconds 2
            $elapsed += 2
            $service.Refresh()

            if ($service.Status -eq 'Running') {
                Write-Host "‚úÖ Service started in $elapsed seconds."
                return
            }

            # Detect stuck in StartPending
            if ($service.Status -eq 'StartPending') {
                if ($service.Status -eq $lastStatus) {
                    $stuckElapsed += 2
                } else {
                    $stuckElapsed = 0
                }

                if ($stuckElapsed -ge $NoProgressSeconds) {
                    Write-Warning "‚õî Service stuck for $NoProgressSeconds seconds. Breaking early."
                    break
                }
            }

            $lastStatus = $service.Status
        }

        # Final status
        $service.Refresh()
        if ($service.Status -eq 'Running') {
            Write-Host "‚úÖ Service started after wait."
            return
        } elseif ($service.Status -eq 'StartPending') {
            Write-Warning "‚ö†Ô∏è Service stuck in StartPending even after timeout."
            try {
                Write-Host "Forcing stop..."
                Stop-Service -Name $ServiceName -Force -ErrorAction Stop
                Start-Sleep -Seconds 3
            } catch {
                Write-Warning "Could not stop stuck service: $_"
            }
        } else {
            Write-Host "Service status: $($service.Status). Will retry."
        }

        $attempt++
        if ($attempt -le $MaxAttempts) {
            Write-Host "üîÅ Sleeping $SleepBetweenRetries seconds before next attempt..."
            Start-Sleep -Seconds $SleepBetweenRetries
        } else {
            Write-Error "‚ùå Failed after $MaxAttempts attempts."
        }
    }
}


# STOP
# Wait for service to stop
        $elapsed = 0
        while ($svc.Status -ne 'Stopped' -and $elapsed -lt $TimeoutSeconds) {
            Start-Sleep -Seconds 2
            $elapsed += 2
            $svc.Refresh()
            Write-Host "[INFO] Waiting... ($elapsed/$TimeoutSeconds sec)" -ForegroundColor Yellow
        }

        if ($svc.Status -eq 'Stopped') {
            Write-Host "[SUCCESS] '$ServiceName' stopped successfully." -ForegroundColor Green
            return $true
        } else {
            Write-Host "[WARN] '$ServiceName' did not stop in time. Attempting force kill." -ForegroundColor Red

            # Try to find and kill the service process
            $wmi = Get-WmiObject -Class Win32_Service -Filter "Name='$ServiceName'"
            if ($wmi -and $wmi.ProcessId -ne 0) {
                Stop-Process -Id $wmi.ProcessId -Force -ErrorAction Stop
                Write-Host "[FORCE] Killed process $($wmi.ProcessId) for '$ServiceName'." -ForegroundColor Magenta
                return $true
            } else {
                Write-Host "[ERROR] Unable to retrieve process ID for '$ServiceName'." -ForegroundColor Red
                return $false
            }
        }

function Start-ServiceWithRetry {
    param (
        [string]$ServiceName,
        [int]$MaxAttempts = 3,
        [int]$RetryDelaySeconds = 3,
        [int]$StartTimeoutSeconds = 30
    )

    $attempt = 1
    $success = $false

    while ($attempt -le $MaxAttempts -and -not $success) {
        try {
            $svc = Get-Service -Name $ServiceName -ErrorAction Stop

            if ($svc.Status -eq 'Running') {
                Write-Host "[INFO] '$ServiceName' is already running." -ForegroundColor Green
                return $true
            }

            Write-Host "[INFO] Attempt #$attempt to start '$ServiceName'" -ForegroundColor Cyan
            Start-Service -Name $ServiceName -ErrorAction Stop

            # Wait for service to reach Running with timeout
            $elapsed = 0
            while ($svc.Status -ne 'Running' -and $elapsed -lt $StartTimeoutSeconds) {
                Start-Sleep -Seconds 2
                $elapsed += 2
                $svc.Refresh()
                Write-Host "[INFO] Waiting for '$ServiceName' to start... ($elapsed/$StartTimeoutSeconds sec)" -ForegroundColor Yellow
            }

            if ($svc.Status -eq 'Running') {
                Write-Host "[SUCCESS] '$ServiceName' started successfully." -ForegroundColor Green
                $success = $true
                return $true
            } else {
                throw "Timeout reached. Service is still not running (Status: $($svc.Status))"
            }
        }
        catch {
            Write-Host "[ERROR] Attempt #$attempt failed: $($_.Exception.Message)" -ForegroundColor Red
            $attempt++
            Start-Sleep -Seconds $RetryDelaySeconds
        }
    }

    Write-Host "[FAIL] '$ServiceName' failed to start after $MaxAttempts attempts." -ForegroundColor Red
    return $false
}

